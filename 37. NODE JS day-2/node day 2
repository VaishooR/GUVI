---> Expressjs: is a framework that handles all the codes that we write manually in Nodejs, by itself.
                Express. js is a framework based on Node. js which is used for building web-application using approaches and principles of Node.
               
---> In React, we use create-react-app command to create an application. This automatically creates pacakage.json file, node modules folder everything.
     But in Node, to install package.json file, type          npm init
                  to install node modules, type               npm i express
 
---> To run the code:
             In Terminal, type 'npm index.js'
             Go to browser, type 'localhost:3000'
             
---> express is installed as dependency. Go to package.json file and check dependencies.

---> Nodemon package: 
     --> Generally to run nodejs codes, we use 'node index.js' command.
     --> To be more generic, go to pacakage.json file, in "script{}" type "start":"node index.js"
     --> Now instead of 'node index.js' command, we can use 'npm start'.
     --> But everytime when we make changes in the code, it doesnot automatically reflect on the output. We have to stop and restart the server everytime when we make
         a change.
     --> To overcome this, we use nodemon package.
     --> Nodemon automatically refelects the changes we make to the code, in the output. No need to stop the server, for every change in the code.
     --> To install nodemon, type 'npm i nodemon --save-dev' command.
     --> -dev is used because, we require nodemon only during development. Not during production.
     --> Type 'nodemon start' or 'nodemon index.js' to run the code.
     
---> devDependencies:
        --> Go to package.json file and check devDependencies. Inside which nodemon package is present.
        --> devDependencies contains packages that we need only during the development, not during production.
        --> During production, we wont stop the server at any cause. So nodemon which is used to restart the server, is not required during the production.

---> app.use middleware:
        --> middlewares contains common codes that has to be excecuted on every endpoints.
        --> the middleware path and the endpoint, if both matches, then 1st the middleware excecution is done, and then moves to the endpoints.
        --> it is not mandatory to have only 1 middleware. We can use multiple middlewares. 
        --> All the methods like app.get, app.put, app.post has to enter into this middlewares first.







Example:

const express=require('express');
const app=express();
app.use(express.json());                                   // This middleware is used to convert the req.body into json format.
app.use('/',(req, res, next) =>{
    console.log('middleware works')
    next()                                                 // moves to next code, else stops here itself
});
app.get('/users',(req, res, next) =>{
    res.send("Hello")
});
app.listen(3000)





const express=require('express');
const app=express();
app.use(express.json());
app.use('/',(req, res, next) =>{
    console.log('middleware works')
    res.end('End response in  middleware')                   // ends here itself
});
app.get('/users',(req, res, next) =>{
    res.send("Hello")
});
app.listen(3000)




